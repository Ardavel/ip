package ip.ui;

import ip.entities.Driver;
import ip.facades.DriverJpaController;
import ip.mock.RandomRunsGenerator;
import ip.network.MultiLayerNetwork;
import ip.network.exceptions.CannotCreateNetworkException;
import ip.network.factory.MultiLayerNetworkFactory;
import ip.network.input.DatabaseInputProvider;
import ip.network.input.InputProvider;
import ip.network.input.InputRow;
import ip.network.neuron.AbstractNeuron;
import ip.network.strategy.bp.BackPropagationStrategy;
import ip.network.strategy.bp.IdentityActivationBPS;
import ip.network.training.ThresholdEpochNetworkTrainer;
import ip.obd.SummarizedRun;
import ip.run.RunHandler;
import ip.scoring.NormalDistribution;
import ip.ui.exceptions.EmptyInputFieldException;
import ip.ui.plot.PlotGenerator;
import ip.ui.plot.PlotNamer;
import java.awt.Cursor;
import java.io.IOException;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author PiotrGrzelak
 */
public class NetworkDialog extends javax.swing.JDialog {

    private final static Logger logger = Logger.getLogger(NetworkDialog.class.getName());

    private final PlotGenerator generator;

    private MultiLayerNetwork network;

    private NormalDistribution safeDrivingDistribution;

    private int hiddenNeurons;

    private int inputNeurons;

    private int outputNeurons;

    private final Random random = new Random();

    private final RunHandler runHandler = new RunHandler();

    private final RandomRunsGenerator randomRunsGenerator = new RandomRunsGenerator();

    private final DriverJpaController driverFacade = new DriverJpaController();

    public NetworkDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        generator = new PlotGenerator();
        initComponents();

        setTitle("Rankingowanie kierowców");

        networkCreationParamsPanel.fixNetworkInputsField(6);
        networkCreationParamsPanel.fixNetworkOutputField(1);
        networkCreationParamsPanel.setNetworkHiddenField(12);

        initializeSafeDrivingDistribution();
    }

    private void initializeSafeDrivingDistribution() {
        safeDrivingDistribution = new NormalDistribution();
        // here safe driving distribution should be deserialized for the final
        // version of the project
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        headerLabel = new javax.swing.JLabel();
        headerSeparator = new javax.swing.JSeparator();
        buttonPanel = new javax.swing.JPanel();
        trainNetworkButton = new javax.swing.JButton();
        networkCreationParamsPanel = new ip.ui.NetworkCreationParamsPanel();
        createNetworkPanel = new javax.swing.JPanel();
        createNetworkButton = new javax.swing.JButton();
        networkCreationSeparator = new javax.swing.JSeparator();
        learningParamsInputPanel = new ip.ui.LearningParamsInputPanel();
        networkSeparator = new javax.swing.JSeparator();
        runsGeneratorPanel = new javax.swing.JPanel();
        generateRunsButton = new javax.swing.JButton();
        numberOfRunsLabel = new javax.swing.JLabel();
        numberOfRuns = new javax.swing.JTextField();
        rankingPanel = new javax.swing.JPanel();
        rankingButon = new javax.swing.JButton();
        rankingSeparator = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Aproksymacja");

        headerLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        headerLabel.setText("Sieć neuronowa");
        headerPanel.add(headerLabel);

        trainNetworkButton.setText("Trenuj sieć");
        trainNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainNetworkButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(trainNetworkButton);

        createNetworkButton.setText("Stwórz sieć");
        createNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNetworkButtonActionPerformed(evt);
            }
        });
        createNetworkPanel.add(createNetworkButton);

        generateRunsButton.setText("Generuj trasy");
        generateRunsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRunsButtonActionPerformed(evt);
            }
        });

        numberOfRunsLabel.setText("Liczba tras:");

        numberOfRuns.setText("100");

        javax.swing.GroupLayout runsGeneratorPanelLayout = new javax.swing.GroupLayout(runsGeneratorPanel);
        runsGeneratorPanel.setLayout(runsGeneratorPanelLayout);
        runsGeneratorPanelLayout.setHorizontalGroup(
            runsGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(runsGeneratorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(numberOfRunsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(numberOfRuns, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(generateRunsButton)
                .addGap(76, 76, 76))
        );
        runsGeneratorPanelLayout.setVerticalGroup(
            runsGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(runsGeneratorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(runsGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateRunsButton)
                    .addComponent(numberOfRunsLabel)
                    .addComponent(numberOfRuns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rankingButon.setText("Ranking");
        rankingButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rankingButonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rankingPanelLayout = new javax.swing.GroupLayout(rankingPanel);
        rankingPanel.setLayout(rankingPanelLayout);
        rankingPanelLayout.setHorizontalGroup(
            rankingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rankingPanelLayout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(rankingButon)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        rankingPanelLayout.setVerticalGroup(
            rankingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rankingButon)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(headerSeparator)
            .addComponent(networkSeparator, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(buttonPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(networkCreationParamsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createNetworkPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(networkCreationSeparator))
                    .addComponent(learningParamsInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(runsGeneratorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rankingPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rankingSeparator, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(headerSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(networkCreationParamsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createNetworkPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(networkCreationSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(learningParamsInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(networkSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runsGeneratorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(rankingSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rankingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trainNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainNetworkButtonActionPerformed
        if (network == null) {
            return;
        }

        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            // here DatabaseInputProvider should be used
            //RandomInputProvider provider = new RandomInputProvider(100);
            InputProvider provider = new DatabaseInputProvider();
            List<InputRow> trainingData = provider.provideAllRows();

            int maxEpochNum = learningParamsInputPanel.getMaximumEpochNumber();
            double learningRate = learningParamsInputPanel.getLearningRate();
            double momentumFactor = learningParamsInputPanel.getMomentumFactor();
            double error = learningParamsInputPanel.getErrorThreshold();

            ThresholdEpochNetworkTrainer trainer
                    = new ThresholdEpochNetworkTrainer(maxEpochNum, error, learningRate, momentumFactor);
            List<Double> meanSquaredError = trainer.trainNetwork(network, trainingData);

            String plotFileName = new PlotNamer().setBaseName("error").setEpochs(meanSquaredError.size()).setHiddenNeurons(hiddenNeurons)
                    .setLearningRate(learningRate).setMomentumFactor(momentumFactor)
                    .generateName();

            generator.generateErrorChart(meanSquaredError, plotFileName);

            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(this, "Trening sieci zakończony", "Trening zakończony", JOptionPane.INFORMATION_MESSAGE);
        } catch (EmptyInputFieldException | IOException ex) {
            Logger.getLogger(NetworkDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_trainNetworkButtonActionPerformed

    private void createNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNetworkButtonActionPerformed
        try {
            inputNeurons = networkCreationParamsPanel.getNetworkInputsNum();
            outputNeurons = networkCreationParamsPanel.getNetworkOutputsNum();
            hiddenNeurons = networkCreationParamsPanel.getHiddenNeuronsNum();

            BackPropagationStrategy strategy = BackPropagationStrategy.getInstance();
            IdentityActivationBPS identityStrategy = IdentityActivationBPS.getInstance();
            MultiLayerNetworkFactory factory = new MultiLayerNetworkFactory(
                    new int[]{inputNeurons, hiddenNeurons, outputNeurons}, strategy, true);
            network = factory.createNetwork();
            network.getOutputLayer().getNeurons().stream().forEach((AbstractNeuron n) -> n.setStrategy(identityStrategy));

            JOptionPane.showMessageDialog(this, "Tworzenie sieci zakończone sukcesem", "Sukces",
                    JOptionPane.INFORMATION_MESSAGE);

            trainNetworkButton.setEnabled(true);
        } catch (EmptyInputFieldException | CannotCreateNetworkException ex) {
            logger.log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Błąd", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_createNetworkButtonActionPerformed

    private void generateRunsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRunsButtonActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        List<SummarizedRun> randomRuns = randomRunsGenerator.generateRandomSummarizedRuns(Integer.parseInt(numberOfRuns.getText()));

        for (SummarizedRun summarizedRun : randomRuns) {
            List<Driver> drivers = driverFacade.findDriverEntities();
            Driver randomDriver = drivers.get(random.nextInt(drivers.size()));
            runHandler.handleRun(summarizedRun, randomDriver, safeDrivingDistribution);
        }

        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        JOptionPane.showMessageDialog(this, "Trasy zostały wygenerowane", "Wygenerowano trasy", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_generateRunsButtonActionPerformed

    private void rankingButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rankingButonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rankingButonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton createNetworkButton;
    private javax.swing.JPanel createNetworkPanel;
    private javax.swing.JButton generateRunsButton;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JSeparator headerSeparator;
    private ip.ui.LearningParamsInputPanel learningParamsInputPanel;
    private ip.ui.NetworkCreationParamsPanel networkCreationParamsPanel;
    private javax.swing.JSeparator networkCreationSeparator;
    private javax.swing.JSeparator networkSeparator;
    private javax.swing.JTextField numberOfRuns;
    private javax.swing.JLabel numberOfRunsLabel;
    private javax.swing.JButton rankingButon;
    private javax.swing.JPanel rankingPanel;
    private javax.swing.JSeparator rankingSeparator;
    private javax.swing.JPanel runsGeneratorPanel;
    private javax.swing.JButton trainNetworkButton;
    // End of variables declaration//GEN-END:variables
}
